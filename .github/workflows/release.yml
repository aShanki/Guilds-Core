name: Auto Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    if: contains(github.event.head_commit.message, 'release:')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Get latest tag
      id: get_tag
      run: |
        # Get the latest tag, default to 1.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        
    - name: Calculate next version
      id: calc_version
      run: |
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        
        # Parse version components
        if [[ $LATEST_TAG =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
        else
          # Default starting version
          MAJOR=1
          MINOR=0
          PATCH=0
        fi
        
        # Check commit message for version bump type
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        
        if [[ $COMMIT_MSG =~ release:.*major ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [[ $COMMIT_MSG =~ release:.*minor ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          # Default to patch increment
          PATCH=$((PATCH + 1))
        fi
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Next version: $NEW_VERSION"
        
    - name: Build JAR
      run: ./gradlew build
      
    - name: Find JAR file
      id: find_jar
      run: |
        JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
        if [ -z "$JAR_FILE" ]; then
          echo "Error: No JAR file found in build/libs"
          exit 1
        fi
        echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "jar_name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.calc_version.outputs.new_version }}
        release_name: Release v${{ steps.calc_version.outputs.new_version }}
        body: |
          Automated release v${{ steps.calc_version.outputs.new_version }}
          
          Commit: ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
        
    - name: Upload JAR to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_jar.outputs.jar_file }}
        asset_name: ${{ steps.find_jar.outputs.jar_name }}
        asset_content_type: application/java-archive